import streamlit as st
import google.generativeai as genai
from pydantic import BaseModel, Field
import json

# --- CONFIGURA√á√ÉO DA API DO GOOGLE ---

GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)
client = genai.GenerativeModel(model_name="gemini-2.5-flash")


# --- DEFINI√á√ÉO DO SCHEMA (ESTRUTURA) DO PERSONAGEM ---
class Personagem(BaseModel):
    """
    Schema para estruturar os dados do personagem gerado pela IA.
    """
    personagem: str = Field(description="O nome completo da persona.")
    descricao: str = Field(description="Um ou mais par√°grafos detalhados com informa√ß√µes biogr√°ficas, caracter√≠sticas e feitos not√°veis, SEM revelar o nome.")
    estilo: str = Field(description="Uma descri√ß√£o sucinta do estilo de comunica√ß√£o da persona (ex: 'Formal e enigm√°tico', 'Alegre e um pouco ca√≥tico').")
    saudacao: str = Field(description="Uma frase curta de sauda√ß√£o que a persona diria ao iniciar o jogo.")

# --- PROMPT PARA GERAR O PERSONAGEM ---
PROMPT_GERADOR = """
# Papel e Objetivo
Voc√™ √© um roteirista e diretor de um jogo de adivinha√ß√£o de personagens.
Sua miss√£o √© escolher secretamente uma figura (hist√≥rica, famosa ou fict√≠cia) que seja amplamente conhecida.

**REGRA CR√çTICA**: O personagem escolhido N√ÉO PODE ESTAR na seguinte lista de exclus√£o: {lista_geracao}

Sua resposta deve ter os seguintes campos:
- "personagem": O nome do personagem.
- "descricao": Uma narrativa sobre a persona, destacando feitos e caracter√≠sticas SEM revelar o nome.
- "estilo": O estilo detalhado de comunica√ß√£o da persona.
- "saudacao": Uma sauda√ß√£o inicial caracter√≠stica, que n√£o entregue quem √© o personagem, seja discreto, j√° que √© um jogo de advinha√ß√£o.
"""

# --- FUN√á√ïES DO JOGO ---

@st.cache_data(show_spinner=False)
def gerar_novo_personagem(lista_a_evitar):
    """
    Chama a API do Gemini para gerar um novo personagem com base no prompt e no schema.
    Utiliza o cache do Streamlit para n√£o gerar o mesmo personagem repetidamente.
    """
    nomes_a_evitar = ", ".join(lista_a_evitar) if lista_a_evitar else "Nenhum"
    prompt_formatado = PROMPT_GERADOR.format(lista_geracao=nomes_a_evitar)

    response = client.generate_content(
      prompt_formatado,
      generation_config=genai.types.GenerationConfig(
          response_mime_type='application/json',
          response_schema=Personagem,
      )
    )
    return json.loads(response.text)


def iniciar_novo_jogo():
    """
    Prepara o estado da sess√£o para um novo jogo.
    """
    st.session_state.mensagens = []
    
    # Gera um novo personagem, evitando os que j√° foram usados na sess√£o
    if 'personagens_usados' not in st.session_state:
        st.session_state.personagens_usados = []

    with st.spinner("Estou pensando em um novo personagem... üïµÔ∏è‚Äç‚ôÇÔ∏è"):
        novo_personagem = gerar_novo_personagem(st.session_state.personagens_usados)
        st.session_state.personagem_secreto = novo_personagem
        
        # Adiciona o novo personagem √† lista de exclus√£o para jogos futuros
        st.session_state.personagens_usados.append(novo_personagem['personagem'])

    # Monta o prompt do sistema para o chatbot
    prompt_sistema = f"""
    ### Contexto do Jogo
    Voc√™ √© um assistente de IA interpretando uma persona em um jogo de adivinha√ß√£o.
    A identidade secreta que voc√™ deve assumir √©: {st.session_state.personagem_secreto['personagem']}.
    Sua biografia para consulta (n√£o para recitar) √©: {st.session_state.personagem_secreto['descricao']}.
    Seu estilo de comunica√ß√£o √©: {st.session_state.personagem_secreto['estilo']}.

    ### Regras Cruciais
    1. **NUNCA REVELE SUA IDENTIDADE**: Sob nenhuma circunst√¢ncia diga quem voc√™ √©. Responda a perguntas diretas de forma evasiva e criativa.
    2. **D√ä PISTAS INDIRETAS**: Responda com base no conhecimento e na perspectiva da sua persona.
    3. **SEJA O PERSONAGEM**: Incorpore a personalidade e o estilo de comunica√ß√£o definidos.
    4. **GERENCIE PALPITES**:
       - Se o usu√°rio errar, negue de forma sutil e dentro do personagem.
       - Se o usu√°rio acertar, confirme de maneira criativa e encerre o jogo parabenizando-o.

    Comece o jogo com a sauda√ß√£o definida. NADA MAIS.
    """
    
    # Cria a inst√¢ncia do chat com o prompt do sistema
    st.session_state.chat = genai.GenerativeModel(
        model_name="gemini-2.5-flash",
        system_instruction=prompt_sistema
    ).start_chat()

    # Adiciona a sauda√ß√£o inicial do personagem ao hist√≥rico
    saudacao_inicial = st.session_state.personagem_secreto['saudacao']
    st.session_state.mensagens.append({"role": "assistant", "content": saudacao_inicial})


# --- INTERFACE DO STREAMLIT ---

st.title("üïµÔ∏è Quem Sou Eu?")
st.markdown("---")
st.markdown("""
Bem-vindo ao jogo de adivinha√ß√£o! Eu vou pensar em um personagem e voc√™ ter√° que descobrir quem √© fazendo perguntas.
**Clique em 'Iniciar Novo Jogo' para come√ßar!**
""")

if st.button("üöÄ Iniciar Novo Jogo", type="primary", use_container_width=True):
    iniciar_novo_jogo()
    st.rerun() # Reinicia o script para atualizar a interface

# Se o jogo j√° come√ßou, exibe a interface de chat
if "mensagens" in st.session_state:
    # Exibe o hist√≥rico de mensagens
    for mensagem in st.session_state.mensagens:
        with st.chat_message(mensagem["role"]):
            st.markdown(mensagem["content"])

    # Captura a entrada do usu√°rio
    if prompt := st.chat_input("Fa√ßa sua pergunta ou d√™ um palpite..."):
        # Adiciona a mensagem do usu√°rio ao hist√≥rico e √† interface
        st.session_state.mensagens.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Envia a mensagem para a IA e obt√©m a resposta
        with st.spinner("Pensando..."):
            resposta = st.session_state.chat.send_message(prompt)
        
        # Adiciona a resposta da IA ao hist√≥rico e √† interface
        with st.chat_message("assistant"):
            st.markdown(resposta.text)
        st.session_state.mensagens.append({"role": "assistant", "content": resposta.text})
        
        # Reinicia o script para atualizar a tela
        st.rerun()
else:
    st.info("O jogo ainda n√£o come√ßou. Clique no bot√£o acima para iniciar.")

# --- Barra Lateral (Sidebar) ---
with st.sidebar:
    st.header("Regras do Jogo")
    st.markdown("""
    1.  **Fa√ßa perguntas** de "sim" ou "n√£o", ou perguntas abertas (Ex: "Em que s√©culo voc√™ viveu?").
    2.  **D√™ um palpite** quando achar que sabe quem √© o personagem.
    3.  **Use o bot√£o 'Iniciar Novo Jogo'** para come√ßar uma nova rodada a qualquer momento.
    4.  Divirta-se!
    """)