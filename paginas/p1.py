import streamlit as st
import google.generativeai as genai
from pydantic import BaseModel, Field
import json

# --- CONFIGURA√á√ÉO DA API DO GOOGLE ---
# Certifique-se de que sua GOOGLE_API_KEY est√° configurada nos secrets do Streamlit
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except (KeyError, FileNotFoundError):
    st.error("A GOOGLE_API_KEY n√£o foi encontrada. Por favor, configure-a nos secrets do Streamlit.")
    st.stop()


# --- DEFINI√á√ÉO DO SCHEMA (ESTRUTURA) DO PERSONAGEM VIA PYDANTIC ---
class Personagem(BaseModel):
    """
    Schema para estruturar os dados do personagem gerado pela IA.
    """
    personagem: str = Field(description="O nome completo da persona.")
    descricao: str = Field(description="Um ou mais par√°grafos detalhados com informa√ß√µes biogr√°ficas, caracter√≠sticas e feitos not√°veis, SEM revelar o nome.")
    estilo: str = Field(description="Uma descri√ß√£o sucinta do estilo de comunica√ß√£o da persona (ex: 'Formal e enigm√°tico', 'Alegre e um pouco ca√≥tico').")
    saudacao: str = Field(description="Uma frase curta de sauda√ß√£o que a persona diria ao iniciar o jogo.")


# --- FUN√á√ïES DO JOGO ---

@st.cache_data(show_spinner="Estou buscando um novo personagem... üïµÔ∏è‚Äç‚ôÇÔ∏è")
def gerar_novo_personagem(lista_a_evitar: list) -> dict | None:
    """
    Chama a API do Gemini para gerar um novo personagem com base no prompt e no schema.
    Retorna um dicion√°rio com os dados do personagem ou None em caso de falha.
    """
    # PROMPT PARA GERAR O PERSONAGEM
    prompt_gerador = """
    # Papel e Objetivo
    Voc√™ atua como roteirista e diretor de um jogo de adivinha√ß√£o de personagens. Sua miss√£o √© selecionar secretamente uma figura conhecida (hist√≥rica, famosa ou fict√≠cia) que seja amplamente reconhecida pelo p√∫blico.
    **REGRA CR√çTICA:** O personagem escolhido N√ÉO PODE estar presente na seguinte lista de exclus√£o: {lista_geracao}
    
    Sua resposta deve ser um JSON contendo, rigorosamente, os seguintes campos:
    - "personagem": Nome do personagem selecionado.
    - "descricao": Narrativa clara e envolvente sobre a persona, destacando feitos e caracter√≠sticas marcantes, sem revelar explicitamente a identidade.
    - "estilo": Descri√ß√£o detalhada do estilo de comunica√ß√£o da persona.
    - "saudacao": Fala inicial, gen√©rica o suficiente para n√£o revelar a identidade.
    
    Verifique se a identidade n√£o √© explicitamente revelada na descri√ß√£o ou sauda√ß√£o e que o personagem n√£o est√° na lista de exclus√£o antes de retornar a sa√≠da final.
    """
    try:
        client = genai.GenerativeModel(model_name="gemini-1.5-flash")
        
        nomes_a_evitar = ", ".join(lista_a_evitar) if lista_a_evitar else "Nenhum"
        prompt_formatado = prompt_gerador.format(lista_geracao=nomes_a_evitar)

        response = client.generate_content(
            prompt_formatado,
            generation_config=genai.types.GenerationConfig(
                response_mime_type='application/json',
                response_schema=Personagem,
            )
        )
        return json.loads(response.text)
    except Exception as e:
        st.error(f"Ocorreu um erro ao contatar a API do Gemini: {e}")
        return None


def iniciar_novo_jogo():
    """
    Prepara o estado da sess√£o para um novo jogo.
    """
    if 'personagens_usados' not in st.session_state:
        st.session_state.personagens_usados = []

    novo_personagem = gerar_novo_personagem(st.session_state.personagens_usados)

    # Verifica√ß√£o robusta para garantir que a API retornou um personagem v√°lido
    if not isinstance(novo_personagem, dict) or not all(k in novo_personagem for k in Personagem.model_fields):
        st.error("N√£o foi poss√≠vel gerar um novo personagem. Por favor, tente novamente.")
        return # Interrompe a execu√ß√£o para evitar erros

    st.session_state.personagem_secreto = novo_personagem
    st.session_state.personagens_usados.append(novo_personagem['personagem'])
    
    # Limpa o hist√≥rico de mensagens e prepara o prompt do sistema para o novo personagem
    st.session_state.mensagens = []

    prompt_sistema = f"""
    ### Contexto do Jogo
    Voc√™ √© um assistente de IA interpretando uma persona em um jogo de adivinha√ß√£o.
    A identidade secreta que voc√™ deve assumir √©: {st.session_state.personagem_secreto['personagem']}.
    Sua biografia para consulta (n√£o para recitar) √©: {st.session_state.personagem_secreto['descricao']}.
    Seu estilo de comunica√ß√£o √©: {st.session_state.personagem_secreto['estilo']}.

    ### Regras Cruciais
    1. **NUNCA REVELE SUA IDENTIDADE**: Sob nenhuma circunst√¢ncia diga quem voc√™ √©.
    2. **D√ä PISTAS INDIRETAS**: Responda com base no conhecimento e na perspectiva da sua persona.
    3. **SEJA O PERSONAGEM**: Incorpore a personalidade e o estilo de comunica√ß√£o definidos.
    4. **GERENCIE PALPITES**: Se o usu√°rio acertar, confirme de maneira criativa e parabenize-o. Se errar, negue sutilmente.

    Comece o jogo com a sauda√ß√£o definida. NADA MAIS.
    """

    # Cria a inst√¢ncia do chat com o prompt do sistema
    # Este objeto ser√° a garantia de que o jogo foi iniciado corretamente
    st.session_state.chat = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        system_instruction=prompt_sistema
    ).start_chat()

    # Adiciona a sauda√ß√£o inicial do personagem ao hist√≥rico para exibi√ß√£o
    saudacao_inicial = st.session_state.personagem_secreto['saudacao']
    st.session_state.mensagens.append({"role": "assistant", "content": saudacao_inicial})


# --- INTERFACE GR√ÅFICA DO STREAMLIT ---

st.set_page_config(page_title="Quem Sou Eu?", page_icon="üïµÔ∏è")

st.title("üïµÔ∏è Quem Sou Eu?")
st.markdown("""
Bem-vindo! Eu vou pensar em um personagem (real ou fict√≠cio) e voc√™ deve adivinhar quem √© fazendo perguntas.
**Clique no bot√£o abaixo para come√ßar!**
""")

if st.button("üöÄ Iniciar Novo Jogo", type="primary", use_container_width=True):
    # Limpa o estado antigo para garantir um novo come√ßo
    for key in ["chat", "mensagens", "personagem_secreto"]:
        if key in st.session_state:
            del st.session_state[key]
    iniciar_novo_jogo()
    st.rerun()

# A interface de chat s√≥ aparece se o objeto 'chat' foi criado com sucesso.
# Esta √© a corre√ß√£o principal para o AttributeError.
if "chat" in st.session_state:
    # Exibe o hist√≥rico de mensagens
    for mensagem in st.session_state.mensagens:
        with st.chat_message(mensagem["role"]):
            st.markdown(mensagem["content"])

    # Captura a entrada do usu√°rio
    if prompt := st.chat_input("Fa√ßa sua pergunta ou d√™ um palpite..."):
        # Adiciona a mensagem do usu√°rio ao hist√≥rico e √† interface
        st.session_state.mensagens.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Envia a mensagem para a IA e obt√©m a resposta
        with st.spinner("Pensando..."):
            try:
                resposta = st.session_state.chat.send_message(prompt)
                resposta_texto = resposta.text
            except Exception as e:
                resposta_texto = f"Ocorreu um erro ao processar sua pergunta: {e}"

        # Adiciona a resposta da IA ao hist√≥rico e √† interface
        with st.chat_message("assistant"):
            st.markdown(resposta_texto)
        st.session_state.mensagens.append({"role": "assistant", "content": resposta_texto})
        
        # Reinicia o script para atualizar a tela
        st.rerun()
else:
    st.info("O jogo ainda n√£o come√ßou. Clique no bot√£o acima para iniciar.")

# --- Barra Lateral (Sidebar) ---
with st.sidebar:
    st.header("Regras do Jogo")
    st.markdown("""
    1.  **Fa√ßa perguntas** de "sim" ou "n√£o", ou perguntas abertas (Ex: "Em que s√©culo voc√™ viveu?").
    2.  **D√™ um palpite** quando achar que sabe quem √© o personagem.
    3.  **Use o bot√£o 'Iniciar Novo Jogo'** para come√ßar uma nova rodada a qualquer momento.
    4.  Divirta-se!
    """)
